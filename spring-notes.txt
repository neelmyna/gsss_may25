SpringBoot:

Spring Boot is a Java-based framework built on top of the Spring Framework that makes it easy to create stand-alone, production-ready Spring applications with minimal configuration.

It simplifies the development process by:
    Eliminating boilerplate code
    Providing default configurations
    Embedding servers like Tomcat or Jetty for easy deployment

Brief History of SpringBoot:

| Year              | Milestone                                                                                                                                                                   |
| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 2002              | The Spring Framework was introduced as a lightweight alternative to Java EE, focusing on dependency injection and aspect-oriented programming.                              |
| 2013              | Pivotal announced Spring Boot to address Spring’s complexity and configuration overhead. The goal: “just run” applications with minimal fuss.                               |
| April 2014        | Spring Boot 1.0 released — introduced auto-configuration, embedded Tomcat, and starter dependencies. Revolutionized how developers built Java applications.                 |
| 2018              | Spring Boot 2.0 released — added Spring WebFlux, Java 8+ support, Actuator enhancements, and better Spring Security integration.                                            |
| 2020              | Spring Boot 2.3+ — support for Docker integration, improved memory management, and graceful shutdown for cloud-native apps.                                                 |
| 2022              | Spring Boot 2.7 — introduced compatibility with Spring Framework 6 and Java 17.                                                                                             |
| November 2022     | Spring Boot 3.0 released — full support for Spring Framework 6, Jakarta EE 9, AOT (Ahead-of-Time) Compilation, and native image support with GraalVM.                       |
| 2024 & beyond     | Continuous updates with a focus on Kubernetes, cloud-native development, observability, and modularization for microservices.                                               |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Benefits of SpringBoot:

| Benefit                      | Description                                                                                                                                     |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------|
| 1. Auto Configuration        | Automatically configures your application based on the libraries in the classpath.                                                              |
| 2. Embedded Server           | Comes with embedded servers (like Tomcat), so you don’t need to deploy WAR files.                                                               |
| 3. Production-Ready          | Built-in monitoring, health checks, and metrics through Spring Boot Actuator.                                                                   |
| 4. Rapid Development         | Reduces setup time and makes it easy to create RESTful APIs and microservices.                                                                  |
| 5. Minimal Configuration     | No need to write long XML configs — most setup is done via annotations and `application.properties`.                                            |
| 6. Starter Dependencies      | Provides pre-defined starter templates (e.g., `spring-boot-starter-web`, `spring-boot-starter-data-jpa`) to include common dependencies easily. |
| 7. Easy Integration          | Seamless integration with databases, security modules, cloud services, etc.                                                                     |
| 8. Community Support         | Widely used with strong community and documentation support.                                                                                    |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Breakdown of SpringBoot application creation:

1. Group (Package Name)
    Purpose: 
        Defines your base Java package for organizing source code.
        Follows reverse domain naming: com.yourcompany.project
        Helps with namespace uniqueness across global projects
        Used by Spring Boot to scan components (@ComponentScan)

2. Artifact
    Purpose: 
        Becomes the name of the output build file (.jar or .war) and the root folder of your project.
        Used in Maven/Gradle artifactId
        Forms the final application filename: artifact-version.jar
        Should be short, descriptive, and lowercase (e.g., eventmanager, docsystem)

3. Project Name
    Purpose: 
        The IDE-visible name of the project directory (and also sometimes used in the name field in pom.xml).
        Not critical to code but important for human identification
        Often same as artifact, but can be more descriptive

4. Maven/Gradle (Build Tool)
    Purpose: 
        Manages project dependencies, build lifecycle, plugins, and packaging.
        Maven uses pom.xml, Gradle uses build.gradle
        Automates compilation, testing, packaging, and deployment
        Handles dependency resolution from remote repositories

5. Packaging Type (Jar or War)
    Purpose: 
        Defines how the application will be packaged and run.
        JAR (Java Archive): Standalone, self-contained app with embedded Tomcat (default and recommended)
        WAR (Web Archive): For deploying in an external servlet container (e.g., WildFly, Tomcat server)

6. Java Version
    Purpose: 
        Sets the language level and compatibility for source code and libraries.
        Must match your local development environment
        Impacts features you can use (e.g., var, switch expressions)
        
7. Dependencies (Spring Web, JPA, Security, etc.)
    Purpose: 
        Adds required starters/libraries automatically for chosen features.
        Spring Boot simplifies this with pre-configured spring-boot-starter-* packages
        Saves time vs. manually configuring everything

------------------------------------------------------------------------------------------------------------------------------------------------------
Overall Summary:

| Field        | Role/Purpose                                           |
| ------------ | ------------------------------------------------------ |
| Group        | Sets base Java package (namespace)                     |
| Artifact     | App/module name, used in build and final `.jar` name   |
| Name/Project | Project folder/IDE name                                |
| Build Tool   | Handles build lifecycle and dependency management      |
| Packaging    | Determines whether app is standalone or deployable WAR |
| Java Version | Sets language compatibility                            |
| Dependencies | Adds required features via Spring Boot starters        |
------------------------------------------------------------------------------------------------------------------------------------------------------
Folder Structure of SpringBoot Application:

project-name/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/example/project/
│   │   │       ├── ProjectApplication.java
│   │   │       ├── controller/
│   │   │       ├── service/
│   │   │       ├── repository/
│   │   │       └── model/
│   │   └── resources/
│   │       ├── application.properties or application.yml
│   │       ├── static/
│   │       ├── templates/
│   │       └── META-INF/
│   └── test/
│       └── java/
│           └── com/example/project/
│               └── ProjectApplicationTests.java
├── pom.xml
└── README.md

| Folder/File                                | Purpose                                                                        |
| ------------------------------------------ | ------------------------------------------------------------------------------ |
| `src/main/java`                            | Main application source code                                                   |
| `ProjectApplication.java`                  | The entry point — contains `@SpringBootApplication`                            |
| `controller/`                              | Contains `@RestController` or `@Controller` classes for handling HTTP requests |
| `service/`                                 | Contains business logic (often annotated with `@Service`)                      |
| `repository/`                              | Interfaces extending `JpaRepository`/`CrudRepository` for DB access            |
| `model/`                                   | Entity/DTO classes representing data (annotated with `@Entity`)                |
| `src/main/resources`                       | Non-code resources like configs and templates                                  |
| `application.properties / application.yml` | App-level config (DB details, server port, etc.)                               |
| `static/`                                  | Static files like HTML, CSS, JS (served automatically)                         |
| `templates/`                               | HTML templates                                                                 |
| `test/`                                    | Unit and integration tests                                                     |
| `pom.xml`                                  | Maven config file — handles dependencies, plugins, build info                  |
-------------------------------------------------------------------------------------------------------------------------------
MVC Structure:

MVC stands for Model-View-Controller — a design pattern used to separate concerns in an application. 
In Spring, it helps you organize your web application into three logical components:

1. Model
    Represents the data and business logic.
    Typically includes Entity classes and Service classes.
    Can also include DTOs or form objects.
    Often uses JPA, Hibernate, or plain Java classes.

2. View
    Responsible for rendering the UI.
    In Spring Boot, views are typically HTML files using Thymeleaf, Freemarker, or JSP.
    Located in src/main/resources/templates/

3. Controller
    Handles incoming HTTP requests, interacts with the model, and returns a view or JSON response.
    Annotated with @Controller or @RestController.

Simple Flow Diagram for Spring MVC:

Client (Browser)
    ↓
[Controller] ←--- Receives HTTP Request (e.g., GET /student/1)
    ↓
[Service/Model] ←--- Business Logic / DB access
    ↓
[Controller] ←--- Adds data to Model
    ↓
[View (Thymeleaf)] ←--- Renders HTML response using model data
    ↓
Client (Browser)
-------------------------------------------------------------------------------------------------------------------------------
Basic Terminologies:
1. Annotations:
    In Java, annotations are a form of metadata that provide data about a program but are not part of the program's actual logic. Annotations are used to add information to the code and can be used by the compiler, runtime environment, or tools like frameworks for various purposes.
    In Spring Boot, annotations play a crucial role in simplifying the configuration and management of the application. They help define various aspects of the application's behavior and structure, reducing the need for XML-based configuration.

    These are the commonly used annotations in SpringBoot:
        @SpringBootApplication initializes the Spring Boot application.
        @Service: A specialization of @Component, used to annotate service classes. It’s a clearer semantic indicator that the class provides some business logic.
        @Repository: A specialization of @Component used to annotate data access objects (DAO) that interact with databases.
        @Controller: Marks a class as a Spring MVC controller, handling web requests.
        @RestController: A specialized version of @Controller, which automatically adds @ResponseBody to every method, making it suitable for RESTful web services.
        @RequestMapping: General mapping for HTTP requests to handler methods of MVC and REST controllers. It can specify request methods (GET, POST, etc.) and paths.
        @GetMapping, @PostMapping, @PutMapping, @DeleteMapping: These are specialized versions of @RequestMapping for handling specific HTTP methods.
        @RequestParam: Binds request parameters to method parameters.
        @PathVariable: Binds path variables to method parameters.
        @RequestBody: Binds the HTTP request body to a method parameter.
        @ResponseBody: Indicates that the return value of a method should be written directly to the HTTP response body.

2. REST API:
    REST stands for Representational State Transfer. A REST API is a web service that uses HTTP methods to perform CRUD operations on resources (like users, rooms, products, etc.).
    It's a way for clients (like the frontend or mobile app) to interact with servers (like Spring Boot backend) over the web.

    Core Concepts of REST API:
    1. Resources
        Everything is treated as a resource (e.g., a Room, a User, a Product).
        Each resource is accessed via a URI (e.g., /api/rooms).

    2. HTTP Methods (CRUD Operations)

    | HTTP Method | Action | Description                              |
    | ----------- | ------ | ---------------------------------------- |
    | GET         | Read   | Retrieve a resource or list of resources |
    | POST        | Create | Create a new resource                    |
    | PUT         | Update | Update an existing resource              |
    | DELETE      | Delete | Remove a resource                        |

    3. Status Codes
    Each response includes an HTTP status code:

    | Code | Meaning               | Usage                            |
    | ---- | --------------------- | -------------------------------- |
    | 200  | OK                    | Successful GET/PUT/DELETE        |
    | 201  | Created               | Successful POST                  |
    | 400  | Bad Request           | Invalid input                    |
    | 404  | Not Found             | Resource doesn’t exist           |
    | 500  | Internal Server Error | Server failed to process request |

3. Getters and Setters:
    They are methods used to read (get) and write (set) the value of private class fields.
    Java uses encapsulation, which means keeping class fields private and controlling access through public methods.

    Why we use Getters and Setters Instead of Public Fields?
        Encapsulation:
            Keeps data safe from unauthorized access or modification.
            Allows you to add validation logic in the setter (e.g., prevent setting negative values).
        Control & Flexibility:
            You can change implementation later (e.g., log a change, transform data) without changing class consumers.

    How Spring Boot Uses Them:
        Spring Boot uses Jackson to automatically convert:
            JSON → Java object (during POST/PUT requests)
            Java object → JSON (during GET response)
            Jackson uses getters and setters to perform this mapping. If you remove them, the fields may not populate properly when you receive or send data via REST APIs.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Explanation of CRUD code:
-------------------------
Model (Room.java):
    The Java class "Room" is a model class (also called a POJO – Plain Old Java Object) used in a Spring Boot + MongoDB application. 
    It represents the structure of a room document stored in the MongoDB rooms collection.

    @Document(collection = "rooms")
    public class Room

        @Document(collection = "rooms"): Tells Spring Data MongoDB that this class maps to the rooms collection in the database.
        The class itself defines the structure for a Room object.

    @Id
    private String id;

        @Id: Marks id as the primary key for MongoDB. It maps to the document's _id field.
        It will be automatically generated if not manually provided.

    private String roomNumber;
    private String roomType; // e.g., Double, Family, Suite
    private int numberOfPax;
    private double costPerDay;
    private List<String> amenities; // e.g., wifi, ac, tv

    Each of these represents a field in the MongoDB document:
        roomNumber: Unique or identifying number for the room (e.g., "A101").
        roomType: Type/category of room.
        numberOfPax: Number of people the room accommodates.
        costPerDay: Cost in your chosen currency.
        amenities: List of features (like WiFi, AC) provided in the room.

    These fields directly map to the JSON structure stored in MongoDB.

    public String getRoomNumber() { ... }
    public void setRoomNumber(String roomNumber) { ... }

        Standard JavaBeans style getters and setters used for accessing and modifying field values.
        Required for Spring Data to read/write these fields to/from the database.

Repository (RoomRepository.java):
    In Spring Boot, the Repository pattern is used to abstract the data access layer and provide a simple interface to interact with the underlying database. 
    The Repository provides methods for CRUD (Create, Read, Update, Delete) operations, reducing boilerplate code and making it easier to interact with the database. 
    Specifically, when using Spring Data, the repository interface provides easy ways to interact with various data stores (like MongoDB, MySQL, etc.) without writing the actual query logic.

    1. Package Declaration:
        package com.example.roombooking.repository;
        
        This specifies the package where the RoomRepository is located. 
        It's common practice to organize classes into packages such as repository, service, controller, etc.

    2. Import Statements:
        import com.example.roombooking.model.Room;
        import org.springframework.data.mongodb.repository.MongoRepository;

        Room is the entity model class that represents the room data.
        MongoRepository is an interface provided by Spring Data MongoDB that provides built-in methods for interacting with a MongoDB database.

    3. Repository Interface:
        public interface RoomRepository extends MongoRepository<Room, String> {
        }

        RoomRepository is an interface that extends MongoRepository<Room, String>. 
        This means it will provide CRUD functionality for Room entities, where Room is the entity class, and String is the type of the entity's ID (in this case, the Room class is likely using a String type for its ID).
        MongoRepository comes with a set of predefined methods such as:
            save(S entity): Saves an entity to the database.
            findById(ID id): Retrieves an entity by its ID.
            findAll(): Retrieves all entities.
            deleteById(ID id): Deletes an entity by its ID.
        Spring Data automatically implements this interface at runtime, so we don't need to manually provide the implementation for these methods.

Controller (RoomController.java):
    The RoomController class is a Spring Boot REST controller that handles HTTP requests for managing Room entities. 
    It uses Spring Web annotations to map incoming HTTP requests to Java methods and provides an API for CRUD (Create, Read, Update, Delete) operations related to rooms. 
    This controller interacts with the RoomRepository to persist data in a database.

    1. Class-Level Annotations:
        @RestController
        @RequestMapping("/api/rooms")
        @CrossOrigin
        public class RoomController

        @RestController: 
            This annotation combines @Controller and @ResponseBody, meaning the class will handle HTTP requests and return data directly in the response body (rather than rendering views). 
            It automatically converts Java objects into JSON format.
        @RequestMapping("/api/rooms"): 
            This specifies the base URL for all request mappings in the controller. 
            All endpoints will start with /api/rooms.
        @CrossOrigin: 
            This annotation allows Cross-Origin Resource Sharing (CORS), which enables this API to be accessed from different domains (useful for front-end applications hosted on a different server or port). 
            It permits HTTP requests from different origins (e.g., different domains, ports).

    2. Autowired RoomRepository:
        @Autowired
        private RoomRepository roomRepository;
        
        @Autowired: 
            This annotation tells Spring to inject the RoomRepository bean into this class.
            The RoomRepository is used for performing CRUD operations on the Room entity in the MongoDB database.

    3. POST Endpoint – Create Room:
        @PostMapping
        public ResponseEntity<?> createRoom(@RequestBody Room room) {
            try {
                Room saved = roomRepository.save(room);
                return ResponseEntity.status(201).body(Map.of("message", "Room created successfully", "room", saved));
            } catch (Exception e) {
                return ResponseEntity.status(500).body(Map.of("message", "Error creating room"));
            }
        }

        @PostMapping: 
            This annotation maps HTTP POST requests to this method, meaning it will handle requests to create a new room.
        @RequestBody Room room: 
            The request body (in JSON format) is automatically deserialized into a Room object.
            The method saves the Room entity to the database using roomRepository.save(room) and returns a ResponseEntity with HTTP status 201 (Created) and a success message, along with the saved Room data.
            If an exception occurs, a response with HTTP status 500 (Internal Server Error) is returned along with an error message.

    4. GET Endpoint – Get All Rooms:
        @GetMapping
        public ResponseEntity<?> getAllRooms() {
            return ResponseEntity.ok(roomRepository.findAll());
        }

        @GetMapping: 
            This annotation maps HTTP GET requests to this method, and it will handle requests to fetch all rooms.
            The method returns all rooms from the database using roomRepository.findAll(), which retrieves all Room documents stored in MongoDB.
            The ResponseEntity.ok() method wraps the list of rooms in a successful HTTP response (status 200).

    5. GET Endpoint – Get Room by ID:
        @GetMapping("/{id}")
        public ResponseEntity<?> getRoomById(@PathVariable String id) {
            Optional<Room> optionalRoom = roomRepository.findById(id);
            if (optionalRoom.isPresent()) {
                return ResponseEntity.ok(optionalRoom.get());
            } else {
                return ResponseEntity.status(404).body(Map.of("message", "Room not found"));
            }
        }

        @GetMapping("/{id}"): 
            This maps GET requests with a room ID (e.g., /api/rooms/{id}) to this method.
        @PathVariable String id: 
            This binds the room ID from the URL to the id parameter of the method.
            The method tries to find a room with the provided ID using roomRepository.findById(id), which returns an Optional<Room>.
            If the room exists (optionalRoom.isPresent()), the method returns the room data with a 200 OK response.
            If the room is not found, a 404 Not Found status is returned, along with a message indicating the room was not found.

    6. PUT Endpoint – Update Room:
        @PutMapping("/{id}")
        public ResponseEntity<?> updateRoom(@PathVariable String id, @RequestBody Room updatedRoom) {
            Optional<Room> optionalRoom = roomRepository.findById(id);
            if (optionalRoom.isPresent()) {
                updatedRoom.setId(id);
                roomRepository.save(updatedRoom);
                return ResponseEntity.ok(Map.of("message", "Room updated successfully"));
            } else {
                return ResponseEntity.status(404).body(Map.of("message", "Room not found"));
            }
        }
        
        @PutMapping("/{id}"): 
            This maps PUT requests to update a room by ID (e.g., /api/rooms/{id}) to this method.
        @PathVariable String id: 
            The room ID is extracted from the URL.
        @RequestBody Room updatedRoom: 
            The updated room data is passed in the request body as JSON and is deserialized into a Room object.
            If the room exists, its ID is updated, and the Room entity is saved using roomRepository.save(updatedRoom). A success message with 200 OK is returned.
            If the room is not found, a 404 Not Found status is returned with a message.

    7. DELETE Endpoint – Delete Room:
        @DeleteMapping("/{id}")
        public ResponseEntity<?> deleteRoom(@PathVariable String id) {
            Optional<Room> optionalRoom = roomRepository.findById(id);
            if (optionalRoom.isPresent()) {
                roomRepository.deleteById(id);
                return ResponseEntity.ok(Map.of("message", "Room deleted successfully"));
            } else {
                return ResponseEntity.status(404).body(Map.of("message", "Room not found"));
            }
        }

        @DeleteMapping("/{id}"): 
            This maps DELETE requests (e.g., /api/rooms/{id}) to this method.
        @PathVariable String id: 
            The room ID is extracted from the URL.
            The method checks if the room exists by calling roomRepository.findById(id).
            If the room exists, it is deleted using roomRepository.deleteById(id), and a success message with a 200 OK status is returned.
            If the room is not found, a 404 Not Found status is returned.

Main Application (RoombookingApplication.java):
    This is the main entry point of a Spring Boot application named RoombookingApplication. 
    It is the class that is executed when the application starts.

    1. Package Declaration:
        package com.example.roombooking;
        
        This defines the package the class belongs to. 
        It helps organize the project structure and is typically aligned with the domain or company name.

    2. Annotations and Class:
        @SpringBootApplication
        public class RoombookingApplication
        
        @SpringBootApplication is a meta-annotation that combines three important Spring annotations:
            @Configuration: 
                Marks this class as a source of bean definitions for the application context.
            @EnableAutoConfiguration: 
                Tells Spring Boot to automatically configure your application based on the dependencies you've added (like MongoDB, Web, etc.).
            @ComponentScan: 
                Enables component scanning so that Spring can detect and register beans (like @RestController, @Service, @Repository) in this package and its sub-packages.

    3. Main Method:
        public static void main(String[] args) {
            SpringApplication.run(RoombookingApplication.class, args);
        }

        This is the main method of the Java application, which is executed first when the application is run.   
        SpringApplication.run(...) is a static method that: 
            Starts the embedded server (like Tomcat).   
            Initializes the Spring ApplicationContext.  
            Performs classpath scanning and loads beans.    
            Launches the whole Spring Boot application.